model orders {
  id                Int      @id @default(autoincrement())
  order_number      String      @unique // NEW: Human-readable like "ORD-2023-0001"
  status            order_status @default(pending)
  
  customer_name String?
  customer_phone String?
  
  desk_number Int? 

  order_type   order_type // NEW: Crucial for distinguishing order types

  // For Takeaway
  takeaway_pickup_time DateTime? // Scheduled pickup time
  takeaway_customer_name String?   // If different from registered customer or for quick orders
  takeaway_customer_phone String?  // If different from registered customer or for quick orders

  // For Delivery
  delivery_address       String?
  delivery_landmark      String?
  delivery_instructions  String?   // e.g., "Leave at door"
  delivery_customer_name String?   // If recipient is different
  delivery_customer_phone String?  // If recipient phone is different
  estimated_delivery_time DateTime?
  actual_delivery_time   DateTime?
  delivery_fee           Float?    @default(0)
  
  // Pricing information
  subtotal          Float       @default(0)
  tax_amount        Float       @default(0)
  discount_amount   Float       @default(0)
  service_charge    Float?      @default(0) // NEW
  tip_amount        Float?      @default(0) // NEW
  total             Float       @default(0)
  
  // Payment information
  payment_status    payment_status @default(unpaid)
  payment_method    payment_method?
  refund_reason     String?
  refunded_at       DateTime?
  transaction_id    String?     // NEW: Payment processor reference
  paid_at           DateTime?   // NEW
  
  // NEW: Order timing
  placed_at         DateTime    @default(now()) // NEW
  preparation_time  Int?        // NEW: In minutes
  ready_at          DateTime?   // NEW
  served_at         DateTime?   // NEW
  completed_at      DateTime?   // NEW
  
  // NEW: Special requests
  notes             String?     // NEW: Customer notes
  
  // Shop relationship
  shop_id           Int
  shop              shops       @relation(fields: [shop_id], references: [id])
  
  // NEW: Cancellation info
  cancelled_at      DateTime?   // NEW
  cancellation_reason String?   // NEW
  
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt

  order_items order_items[]

  coupon_redemption coupon_redemptions?
}

model order_items {
  id                Int         @id @default(autoincrement())
  order_id          Int
  order             orders      @relation(fields: [order_id], references: [id])
  
  product_id        Int
  product           products    @relation(fields: [product_id], references: [id])
  
  quantity          Int         @default(1)
  unit_price        Float
  total_price       Float       @default(0)
  
  // NEW: Customization options
  special_requests  String?     
  variant_options   Json?       
  
  // NEW: Preparation tracking
  status            item_status @default(pending)
  started_at        DateTime?   // NEW
  completed_at      DateTime?   // NEW
  
  
  created_at        DateTime    @default(now())

  order_item_modifiers order_item_modifiers[]

}

enum order_status {
  pending
  confirmed
  preparing
  ready // For pickup or out for delivery
  served // For dine-in
  completed // Generic completion, can be after served/delivered/picked_up
  cancelled
}

enum item_status {
  pending
  preparing
  ready
  served
  cancelled
}

enum payment_status {
  unpaid
  paid
  refunded
}

enum payment_method {
  cash
  credit_card
  debit_card
  mobile_wallet
  bank_transfer
  voucher
  online_payment
}

enum order_type {
  dine_in
  takeaway
  delivery
}